<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

    <!--java.util.Properties类. 是一个Map集合. key和value都是字符串-->
    <!--    <properties>-->
    <!--        &lt;!&ndash;这里去定义一些属性&ndash;&gt;-->
    <!--        &lt;!&ndash;用的时候 在value="${jdbc.driver}"&ndash;&gt;-->
    <!--        <property name="jdbc.driver" value="com.mysql.jdbc.Driver"/>-->
    <!--        <property name="jdbc.url" value="jdbc:mysql://localhost:3306/powernode?rewriteBatchedStatements=true"/>-->
    <!--        <property name="jdbc.username" value="root"/>-->
    <!--        <property name="jdbc.password" value="hsp"/>-->
    <!--&lt;!&ndash;但实际上可以再写一个properties文件, 导进来就好了&ndash;&gt;-->
    <!--    </properties>-->
    <!--    但实际上可以再写一个properties文件, 导进来就好了-->
    <!--    resource是从类的根路径下查找-->
    <properties resource="mysql.properties"/>
    <!--    还有url第二种写法 file:///-->
    <!--    <properties url="file:///xxx.properties"/>-->


    <!--    default表示默认使用的环境-->
    <!--    默认环境：当你使用mybatis创建SqlSessionFactory对象的时候，没有指定环境的话，默认使用哪个环境-->
    <environments default="powernode">
        <!-- 其中一个环境,连接的数据库是powernode-->
        <!--        一般一个数据库会对应一个SqlSessionFactory对象-->
        <!--        一个环境environment会对应一个SqlSessionFactory对象-->
        <environment id="powernode">
            <!--
                transactionManager标签：
                    1. 作用：配置事务管理器。指定mybatis具体使用什么方式去管理事务
                    2. type属性有两个值：
                        第一个：JDBC 使用原生的JDBC代码来管理事务
                            conn.setAutoCommit()
                            ...
                            conn.commit()
                        第二个: MANAGED mybatis不再负责事务的管理.将事务交给其他JEE(Java EE)容器管理. 例如:spring
                    3. 大小写无所谓, 但不能写其他值.只能二选一
                    4. 在mybatis中提供一个事务管理器接口: Transaction
                        该接口下有两个实现类
                            JdbcTransaction
                            ManagedTransaction
                        如果type="JDBC", 那么底层实例化JdbcTransaction
                        如果type="MANAGED", 那么底层会实例化ManagedTransaction
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource配置
                    1. dataSource被称为数据源
                    2. dataSource作用是什么? 为程序提供Connection对象.(但凡是给程序提供Connection对象的, 都叫做数据源)
                    3. 数据源实际上是一套规范.JDK中有这套规范javax.sql.DataSource
                    4. 我们自己也可以编写数据源组件,只要实现javax.sql.DataSource接口就行了,实现接口当中的所有的方法.这样就有了自己的数据源
                    比如你可以写一个属于自己的数据库连接池(数据库连接池是提供连接对象的,所以数据库连接池就是一个数据源)
                    5. 常见的数据源组件有哪些呢?
                        druid
                        c3p0
                        ...
                    6. type属性用来指定数据源的类型,就是指定具体使用什么方式来获取Connection对象:
                        type属性有三个值:必须三选一
                        type="[UNPOOLED | POOLED | JNDI]"
                        UNPOOLED: 不适用数据库连接池技术, 但是也实现了javax.sql.DataSource接口,每次请求都是创建Connection对象
                        POOLED: 使用mybatis自己的数据库连接池技术
                        JNDI: 使用第三方的数据库连接池技术,日后会讲怎么在mybatis中使用第三方的数据库连接池

                        JNDI是一套规范.谁实现了这套规范? 大部分的web容器都是实现了
                            例如:Tomcat
                        JNDI是:java命名目录接口.Tomcat服务器实现了这个规范


            -->
            <!--            <dataSource type="JNDI">-->
            <!--                &lt;!&ndash;例如tomcat实现druid的实现类路径&ndash;&gt;-->
            <!--                <property name="initial_context" value="..."/>-->
            <!--                <property name="data_source" value="..."/>-->
            <!--            </dataSource>-->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                <!--注意:正常使用连接池的话,池中有很多参数是需要配置的.设置好参数,可以让连接池发挥的更好,事半功倍的效果-->
                <!--具体连接池当中的参数如何配置呢? 需要反复的根据当前业务情况进行测试-->
                <!--poolMaximumActiveConnections – 连接池中最多的正在使用的连接对象的数量上限，默认值：10-->
                <property name="poolMaximumActiveConnections" value="3"/>
                <!--每隔两秒打印日志, 并且尝试获取连接对象-->
                <property name="poolTimeToWait" value="2000"/>
                <!--强行让某个连接空闲, 超时时间的设置-->
                <property name="poolMaximumCheckoutTime" value="10000"/>
            </dataSource>
        </environment>

        <!--        另一个环境-->
        <environment id="hso01">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/hsp01?rewriteBatchedStatements=true"/>
                <property name="username" value="root"/>
                <property name="password" value="hsp"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="CarMapper.xml"/>
    </mappers>
</configuration>